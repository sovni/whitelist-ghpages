{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","whitelist","componentWillMount","eth","getAccounts","Whitelist","networks","instance","Contract","abi","setState","runInit","alert","error","methods","getAddresses","call","address","value","send","from","this","className","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","Form","Group","controlId","Control","type","id","ref","input","Button","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.109bb80e.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Card from 'react-bootstrap/Card';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Whitelist from \"./contracts/Whitelist.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = { web3: null, accounts: null, contract: null, whitelist: null };\r\n\r\n  componentWillMount = async () => {\r\n    try {\r\n      // Récupérer le provider web3\r\n      const web3 = await getWeb3();\r\n  \r\n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Récupérer l’instance du smart contract “Whitelist” avec web3 et les informations du déploiement du fichier (client/src/contracts/Whitelist.json)\r\n      const deployedNetwork = Whitelist.networks[3];\r\n  \r\n      const instance = new web3.eth.Contract(\r\n        Whitelist.abi,\r\n        \"0x968E3E2c2250eC61B78846f400E0EC07C67cB424\",\r\n      );\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3, accounts, contract: instance }, this.runInit);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  runInit = async() => {\r\n    const { accounts, contract } = this.state;\r\n  \r\n    // récupérer la liste des comptes autorisés\r\n    const whitelist = await contract.methods.getAddresses().call();\r\n    // Mettre à jour le state \r\n    this.setState({ whitelist: whitelist });\r\n  }; \r\n\r\n  whitelist = async() => {\r\n    const { accounts, contract } = this.state;\r\n    const address = this.address.value;\r\n    \r\n    // Interaction avec le smart contract pour ajouter un compte \r\n    await contract.methods.whitelist(address).send({from: accounts[0]});\r\n    // Récupérer la liste des comptes autorisés\r\n    this.runInit();\r\n  }\r\n \r\n\r\n  render() {\r\n    const { whitelist } = this.state;\r\n    if (!this.state.web3) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <div>\r\n            <h2 className=\"text-center\">Système d'une liste blanche</h2>\r\n            <hr></hr>\r\n            <br></br>\r\n        </div>\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card style={{ width: '50rem' }}>\r\n            <Card.Header><strong>Liste des comptes autorisés</strong></Card.Header>\r\n            <Card.Body>\r\n              <ListGroup variant=\"flush\">\r\n                <ListGroup.Item>\r\n                  <Table striped bordered hover>\r\n                    <thead>\r\n                      <tr>\r\n                        <th>@</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {whitelist !== null && \r\n                        whitelist.map((a) => <tr><td>{a}</td></tr>)\r\n                      }\r\n                    </tbody>\r\n                  </Table>\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n        <br></br>\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n          <Card style={{ width: '50rem' }}>\r\n            <Card.Header><strong>Autoriser un nouveau compte</strong></Card.Header>\r\n            <Card.Body>\r\n              <Form.Group controlId=\"formAddress\">\r\n                <Form.Control type=\"text\" id=\"address\"\r\n                ref={(input) => { this.address = input }}\r\n                />\r\n              </Form.Group>\r\n              <Button onClick={ this.whitelist } variant=\"dark\" > Autoriser </Button>\r\n            </Card.Body>\r\n          </Card>\r\n          </div>\r\n        <br></br>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}